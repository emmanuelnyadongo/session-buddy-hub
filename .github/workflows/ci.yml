name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

# Add permissions for security scanning
permissions:
  contents: read
  security-events: write
  actions: read
  pull-requests: read

jobs:
  # Frontend CI
  frontend:
    name: Frontend CI
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install frontend dependencies
      run: npm ci
      
    - name: Lint frontend
      run: npm run lint
      
    - name: Type check frontend
      run: npx tsc --noEmit
      
    - name: Test frontend
      run: npm test --if-present
      
    - name: Build frontend
      run: npm run build
      
    - name: Audit frontend dependencies
      run: npm audit --audit-level=moderate
      
  # Backend CI
  backend:
    name: Backend CI
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
        
    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci
      
    - name: Install root dependencies
      run: npm ci
      
    - name: Lint backend
      working-directory: .
      run: npm run lint:backend
      
    - name: Setup backend test environment
      working-directory: ./backend
      run: |
        echo "NODE_ENV=test" >> .env
        echo "DB_HOST=localhost" >> .env
        echo "DB_PORT=5432" >> .env
        echo "DB_NAME=test_db" >> .env
        echo "DB_USER=postgres" >> .env
        echo "DB_PASSWORD=postgres" >> .env
        echo "JWT_SECRET=test_secret_key_for_ci_pipeline_only" >> .env
        echo "SMTP_HOST=smtp.gmail.com" >> .env
        echo "SMTP_PORT=587" >> .env
        echo "SMTP_USER=test@example.com" >> .env
        echo "SMTP_PASS=test_password" >> .env
        echo "SMTP_FROM=test@example.com" >> .env
      
    - name: Run backend migrations
      working-directory: ./backend
      run: npm run migrate
      
    - name: Test backend
      if: ${{ env.RUN_BACKEND_TESTS == 'true' }}
      working-directory: ./backend
      run: npm test
      
    - name: Build backend (if applicable)
      working-directory: ./backend
      run: npm run build --if-present
      
    - name: Audit backend dependencies
      working-directory: ./backend
      run: npm audit --audit-level=moderate 